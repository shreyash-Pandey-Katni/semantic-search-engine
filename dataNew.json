{
    "Reverb": {
        "text": "How do I export or download runtime requests?This use case starts when you want to export the client request from your API Gateway instance to your local machine and ends when you import the request in another API Gateway instance.To export the runtime request1.  Click the Tracer tab. The Trace API page displays the Runtime events, Policies applied, and Event tracer details sections.2.  In the Runtime events section, select the runtime event that you want to export. Note:The Runtime events section lists only 20 runtime events per page. When you click Select all check box, all the runtime events of the API do not get selected. Instead, the 20 runtime events that are listed in that particular page gets selected.3.  Click to export the runtime request. The selected request is downloaded to your local machine in a predefined location.",
        "link": "https://documentation.softwareag.com/webmethods/api_gateway/yai10-15/webhelp/yai-webhelp/yai-webhelp/ta-export_trace.html#"
    },
    "How Do I Enforce Policies to Protect My APIs?": {
        "text": "How Do I Enforce Policies to Protect My APIs?This section explains the steps to secure your API using the API Key check policy. This policy enables you to identify and validate the client's identity for exposing an API. After configuring policies, you must configure transaction logger to save API Gateway transaction event logs.To enforce policies on APIs1. Click APIs in the title navigation bar and select the required API. 2. Click Policies and click Edit. 3. Select the policy stage and the required policy. The details of the policy appear.4. Provide the properties for the selected policy and click Save. The policy is applied to the API.For more information, see      Policies.",
        "link": "https://documentation.softwareag.com/webmethods/api_gateway/yai10-15/webhelp/yai-webhelp/yai-webhelp/ta-qsg_enforce_policies_for_apis.html#"
    },
    "User Management": {
        "text": "User ManagementAPI Gateway provides the capability to manage Users, Groups and Access profiles in API Gateway.API Gateway provides the following REST API and the resources to retrieve the User ACL list:GET/rest/apigateway/accessProfiles: Retrieves a list of all access profiles in API Gateway.POST/rest/apigateway/accessProfiles: Creates an access profile in API Gateway. The API request body must contain the payload for the access profile.GET/rest/apigateway/accessProfiles/{accessProfileId}: Retrieves the details of an access profile in API Gateway.PUT/rest/apigateway/accessProfiles/{accessProfileId}: Updates the details of a specified access profile in API Gateway. The API request body must contain the payload for the updated access profile.DELETE/rest/apigateway/accessProfiles/{accessProfileId}: Deletes an access profile from API Gateway.GET/rest/apigateway/groups: Retrieves list of all groups in API Gateway.POST/rest/apigateway/groups: Creates a group in API Gateway. The API request body must contain the payload for the group.GET/rest/apigateway/groups/{groupId}: Retrieves the details of a group in API Gateway.PUT/rest/apigateway/groups/{groupId}: Updates the details of a specified group in API Gateway. The API request body must contain the payload for the updated group.DELETE/rest/apigateway/groups/{groupId}: Deletes a group from API Gateway.GET/rest/apigateway/users: Retrieves list of all users in API Gateway.POST/rest/apigateway/users: Creates an user in API Gateway. The API request body must contain the payload for the user.GET/rest/apigateway/users/{userId}: Retrieves the details of an user in API Gateway.PUT/rest/apigateway/users/{userId}: Updates the details of a specified user in API Gateway. The API request body must contain the payload for the updated user.DELETE/rest/apigateway/users/{userId}: Deletes the a specified user in API Gateway.POST/rest/apigateway/users/authenticate: Authenticates a user in API Gateway.GET/rest/apigateway/installedLanguages: Retrieves list of installed language packs in API Gateway.GET/rest/apigateway/is/lockedAccounts: Retrieves the locked user accounts in API Gateway.POST/rest/apigateway/is/lockedAccounts: Unlocks the locked user accounts by API Gateway.For details on the REST API, see the swagger file APIGatewayUserManagementSwagger.json, located at SAG_Install_Directory/IntegrationServer/instances/instance_name/packages/WmAPIGateway/resources/apigatewayservices.For details on sample payloads, import Postman collection from the following link in Postman client:      https://github.com/SoftwareAG/webmethods-api-gateway/blob/master/apigatewayservices/postmancollections/apis/user-management/UserManagement.json.",
        "link": "https://documentation.softwareag.com/webmethods/api_gateway/yai10-15/webhelp/yai-webhelp/yai-webhelp/co-restapi_useracl.html#"
    },
    "Elasticsearch": {
        "text": "ElasticsearchThe runtime events and metrics payload generated by API Gateway at run-time is published to the configured Elasticsearch destination. The columns that make up the events and metrics data model for Elasticsearch are listed below:Transactional EventsColumnDescriptionapiIdThe unique identifier for the API.Example: af70b2de-c9c5-4f40-94be-7d8622743e42apiNameName of the API in which the event occurred.Example: SampleAPIapiVersionThe system-assigned version identifier for the API.Example: 1.0applicationIdThe unique identifier for the application associated with the API invocation.Example: c0f84954-9732-11e5-b9f4-f159eafe47b2applicationIpIP address of the application associated with the API invocation.Example: 10.60.37.42applicationNameName of the application associated with the API invocation.An application name is populated as unknown when API Gateway is unable to identify the application using a security policy that is configured for the API.Example: SampleApplicationcachedResponseIndicates whether the response is sent to the client from the cached data present in API Gateway through the Service result caching policy or the response is received from Native service and sent to client.Possible values are: Cached, Not-CachedcorrelationIDThe unique identifier that is automatically generated for every request coming to API Gateway and can be used to query the log.Example: MED38e9cfa4-2348-408b-9462-124b2181c1a6:656creationDateDate and time when the event was generated in API Gateway.Example: 1501671101509customFieldsThe custom fields an API Provider can provide to log a new field and value for a transaction event.Example: {\"customfield\":\"customvalue\"}errorOriginThe origin of error.Example: NativeserivceeventTypeThe type of event that occurred.Example: TransactionalexternalCallsList the external calls from API Gateway. These external calls can be to a native service or service registry.Example:[{\"externalCallType\":\"SERVICE_REGISTRY_CALL\",\"externalURL\":\"http://service.registry.com\",\"callDuration\":49,\"callStartTime\":1562244570486,\"callEndTime\":1562244570535,\"responseCode\": \"200\"},{\"externalCallType\":\"NATIVE_SERVICE_CALL\",\"externalURL\":\"https://petstore.swagger.io/v2/store/inventory\",\"callDuration\":1285,\"callStartTime\":1562244569252, \"callEndTime\":1562244570537,\"responseCode\":\"200\"}]httpMethodThe HTTP method used to invoke the API.Example: GETisCallbackRequestIndicates whether the event is generated for a callback request.Possible values are:true. This denotes that the event is generated for a callback request.false. This denotes that the event is generated for a normal response.messageTypeThis is applicable only for WebSocket APIs. This indicates the type of a WebSocket message.Possible values are: binary, textnativeHttpMethodThe HTTP method used to invoke the native service.Example: GETnativeRequestHeadersRequest header in the incoming request from the API Gateway to native service.Example:{\"Authorization\":\"**************\",\"Accept\": \"*/*\",\"Authorization\": \"**************\", \"Accept\":\"*/*\",\"Cache-Control\": \"no-cache\",\"User-Agent\": \"PostmanRuntime/7.13.0\",\"Postman-Token\": \"381424fa-e3b3-4058-8df9-4abf9d72c899\",\"postmanHeader\":\t\"hello\",\"accept-encoding\": \"gzip, deflate\", \"Content-Type\": \"application/x-www-form-urlencoded\"}nativeReqPayloadThe native service request data.Example:{ \"param1\" : \"value1\", \"param2\" : 10}nativeResponseHeadersResponse header in the outgoing response from the native service to API Gateway.Example:{\"Server\":\"Jetty(9.2.9.v20150224)\",\"Access-Control-Allow-Origin\":\"*\",\"Access-Control-Allow-Methods\": \"GET, POST, DELETE, PUT\",\"Connection\":\"close\",\"Date\": \"Fri, 07 Jun 2019 12:44:13 GMT\",\"Access-Control-Allow-Headers\": \"Content-Type, api_key, Authorization\",\"Content-Type\": \"application/json\"}nativeResPayloadThe native service response data.Example:{\"id\":2,\"category\":{   \"id\":2,   \"name\":\"string\"},\"name\":\"pysen\",\"photoUrls\":[\"string\"],\"tags\":[{   \"id\":0,   \"name\":\"string\"}],\"status\":\"available\"}nativeURLURL of the native service.Example: http://petstore.swagger.io/v2/pet/2operationNameName of the API operation that is invoked.Example: /pet/{petId}originThis is applicable only for WebSocket APIs. The origin of the request.Possible values are: client, serverpackageIdThe unique identifier for the API package.Example: c0f84954-9732-11e5-b9f4-f159eafe47b2packageNameName of the API package.Example: Travel PackageplanIdThe unique identifier for the API plan.Example: d0f84954-9732-11e5-b9f4-f159eafe47b2planNameName of the API plan.Example: Gold PlanproviderTimeTime in milliseconds required for API Gateway to invoke a native provider and receive a response. This time includes the overhead incurred by API Gateway. Overhead includes the time it takes for a provider to process a request and return a response, plus any network latency to or from the provider. Subtracting total time from provider time must give a rough indicator of the API Gateway overhead.Example: 1367queryParameteresThis is applicable only for REST APIs. Query parameters present in the incoming REST request.Example: {\"status\":\"available\"}reqPayloadThe API request payload data.Example: <RequestPayload>requestHeadersRequest header in the incoming request from the client.Example:{\"Cache-Control\":\"max-age=0\",\"Accept\":\"text/plain,application/json;q=0.9,image/webp,image/apng,*/*;q=0.8\",\"Upgrade-Insecure-Requests\":\"1\",\"Connection\":\"keep-alive\",\"User-Agent\":\"Mozilla/5.0(Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)Chrome/65.0.3325.181Safari/537.36\",\"Host\":\"mcdaso02:5555\",\"Accept-Encoding\":\"gzip,deflate\",\"Accept-Language\":\"en-US,en;q=0.9,ta;q=0.8\",\"Content-Type\":\"application/x-www-form-urlencoded\"}resPayloadThe API response payload data.Example: <ResponsePayload>responseCodeThe HTTP response status code that indicates success or failure of the requested operation.Example: 404responseHeadersResponse header in the outgoing response.Example:{\"Server\":\"Jetty(9.2.9.v20150224)\",\"Access-Control-Allow-Origin\":\"*\",\"Access-Control-Allow-Methods\":\"GET,POST,DELETE, PUT\",\"Connection\":\"close\",\"Date\":\"Fri, 30 Mar 2018 08:25:45 GMT\",\"Access-Control-Allow-Headers\":\"Content-Type,api_key,Authorization\",\"Content-Type\":\"application/xml\"}sourceGatewayNodeSource API Gateway's IP address.Example: 10.0.75.1statusStatus of the API request.Possible values are: SUCCESS, FAILUREtotalDataSizeThe total combined size of request and response payloads in bytes.Example: 51totalTimeTime in milliseconds required to invoke the API provider. This time includes the overhead incurred by API Gateway. Overhead includes security overhead for encryption, decryption, and load-balance retries.Example: 1401Error EventsColumnDescriptionapiIdThe unique identifier for the API.Example: af70b2de-c9c5-4f40-94be-7d8622743e42apiNameName of the API in which the event occurred.Example: SampleAPIapiVersionThe system-assigned version identifier for the API.Example: 1.0 applicationIdThe unique identifier for the application associated with the API invocation.Example: c0f84954-9732-11e5-b9f4-f159eafe47b2applicationIpIP address of the application associated with the API invocation.Example: 10.60.37.42applicationNameName of the application associated with the API invocation.An application name is populated as unknown when API Gateway is unable to identify the application using a security policy that is configured for the API.Example: SampleApplicationcorrelationIDThe unique identifier that is automatically generated for every request coming to API Gateway and can be used to query the log.Example: MED38e9cfa4-2348-408b-9462-124b2181c1a6:656creationDateDate and time when the event was generated in API Gateway.Example: 1501671101509errorDescMessage that describes the error that occurred.Example: Native service provider error. Code : 404eventSourceThe source where the event occurred.Example: API_Gateway_InstanceeventTypeThe type of event that occurred.Example: ErrorhttpMethodThe HTTP method used to invoke the API.Example: GEToperationNameName of the API operation that is invoked.Example: /pet/{petId}responseCodeThe HTTP response status code that indicates success or failure of the requested operation.Example: 404Monitoring EventsColumnDescriptionalertDescText of the alert message sent to a configured destination when the performance conditions are violated. The alert message is specified in the policy definition of an API.Example: EnforcePolicy-HardLimitalertSourceName of the API Gateway policy that generated the alert message.Example: MonitorpolicyalertTypeThe type of alert generated for the event.Example: MonitorapiIdThe unique identifier for the API.Example: af70b2de-c9c5-4f40-94be-7d8622743e42apiNameName of the API in which the event occurred.Example: SampleAPIapiVersionThe system-assigned version identifier for the API.Example: 1.0applicationIdThe unique identifier for the application associated with the API invocation.Example: c0f84954-9732-11e5-b9f4-f159eafe47b2applicationIpIP address of the application associated with the API invocation.Example: 10.60.37.42applicationNameName of the application associated with the API invocation.An application name is populated as unknown when API Gateway is unable to identify the application using a security policy that is configured for the API.Example: SampleApplicationcreationDateDate and time when the event was generated in API Gateway.Example: 1501671101509eventSourceThe source where the event occurred.Example: API_Gateway_InstanceeventTypeThe type of event that occurred.Example: MonitorhttpMethodThe HTTP method used to request the API access.Example: GETmonitorAttrThe monitored attribute which has breached the configured SLA.Example: AVGRESPONSETIME GT 1.0, SUCCESSCOUNT EQ 3, REQUESTCOUNT GT 10operationNameName of the API operation that is invoked.Example: /pet/{petId}responseCodeThe HTTP response status code that indicates success or failure of the requested operation.Example: 200Policy Violation EventsColumnDescriptionalertDescText of the alert message sent to a configured destination when the performance conditions are violated. The alert message is specified in the policy definition of an API.Example: A violation was detected for policy (Unknown-Policyuser ): application could not be identified. Anonymous access is not allowed for this service!alertSourceName of the API Gateway policy that generated the alert message.Example: Unknown-PolicyalertTypeThe type of alert generated for the event.Example: PolicyViolationapiIdThe unique identifier for the API.Example: af70b2de-c9c5-4f40-94be-7d8622743e42apiNameName of the API in which the event occurred.Example: SampleAPIapiVersionThe system-assigned version identifier for the API.Example: 1.0applicationIdThe unique identifier for the application associated with the API invocation.Example: 9434e90d-65c3-4e37-8ccb-595b8df3e645applicationIpIP address of the application associated with the API invocation.Example: 10.60.37.42applicationNameName of the application associated with the API invocation.An application name is populated as unknown when API Gateway is unable to identify the application using a security policy that is configured for the API.Example: SampleApplicationcreationDateDate and time when the event was generated in API Gateway.Example: 1501671101509eventSourceThe source where the event occurred.Example: API_Gateway_InstanceeventTypeThe type of event that occurred.Example: PolicyViolationhttpMethodThe HTTP method used to request the API access.Example: GEToperationNameName of the API operation that is invoked.Example: /pet/{petId}responseCodeThe HTTP response status code that indicates success or failure of the requested operation.Example: 503Performance MetricsColumnDescriptionapiIdThe unique identifier for the API.Example: af70b2de-c9c5-4f40-94be-7d8622743e42apiNameName of the API in which the event occurred.Example: SampleAPIapiVersionThe system-assigned version identifier for the API.Example: 1.0availabilityThe percentage of time that an API was available during the current interval. A value of 100 indicates that the API was always available. If invocations fail due to policy violations, this parameter could still be as high as 100.Example: 100.0avgResponseTimeThe average amount of time it took the API to complete each invocation in the current interval. Response time is measured from the moment API Gateway receives the request until the moment it returns the response to the caller.Example: 1376creationDateDate and time when the event was generated in API Gateway.Example: 1501671101509eventTypeThe type of event that occurred.Example: PerformanceDatafaultCountThe number of failed API invocations in the current interval.Example: 1includeFaultsIncludes failed API invocations.Possible values are: true, falseintervalStartThe starting date and time from which you want to examine metrics.Example: 02 Aug 2017 10:51:31 GMTintervalStopThe ending date and time until which you want to examine metrics.Example: 02 Aug 2017 10:52:31 GMTmaxResponseTimeThe maximum amount of time (in milliseconds) it took for the API to complete an invocation in the current interval.Example: 1401minResponseTimeThe minimum amount of time (in milliseconds) it took for the API to complete an invocation in the current interval.Example: 1352operationNameName of the API operation that is invoked.Example: /pet/{petId}successCountThe number of successful API invocations in the current interval.Example: 1totalCountThe total number of API invocations (successful and unsuccessful) in the current interval.Example: 2",
        "link": "https://documentation.softwareag.com/webmethods/api_gateway/yai10-15/webhelp/yai-webhelp/yai-webhelp/re-metrics_events_elasticsearch.html#"
    },
    "Troubleshooting Tips: Securing API Data Store (Elasticsearch)": {
        "text": "Troubleshooting Tips: Securing API Data Store (Elasticsearch)During authentication a pop-up window appears when I try to view any dashboards in the Analytics tabAt times, when I view the Analytics tab, the Authentication pop-up window appears. This might be because Kibana is secured with SSL and API Gateway is unable to connect to Kibana. As of now, API Gateway does not support enabling SSL for Kibana. Kibana ports can be blocked from external access through firewall configuration.Resolution:Remove the following properties from kibana.yml file located at SAGInstallDir\\profiles\\IS_default\\apigateway\\dashboard\\config:server.ssl.enabled: trueserver.ssl.cert: \"/eip/apps/sag/InternalDataStore/config/PVWSLDWM001_pem.cer\"server.ssl.key: \"/eip/apps/sag/InternalDataStore/config/PVWSLDWM001_pem.key\"",
        "link": "https://documentation.softwareag.com/webmethods/api_gateway/yai10-15/webhelp/yai-webhelp/yai-webhelp/re-troubleshooting_securing_datastore.html#"
    },
    "OpenShift Sample Files": {
        "text": "OpenShift Sample FilesAPI Gateway installation provides OpenShift deployment samples. For details about these sample files, see      https://github.com/SoftwareAG/webmethods-api-gateway/tree/master/samples/openshift. To use the samples to deploy API Gateway to an OpenShift cluster, you must adapt the samples to configure the required specifications.The OpenShift samples are conceptually identical to the ones described in the      Kubernetes Sample Files section and support the same architectural patterns for ElasticSearch. This section highlights the parts that are specific to OpenShift environment.OpenShift uses a DeploymentConfig object with API version apps.openshift.io/v1 to describe a deployment. The section in the sample file is as follows:apiVersion: apps.openshift.io/v1kind: DeploymentConfigIf you have a pod labeled as tuned.openshift.io/elasticsearch, then OpenShift automatically changes the required system settings on the machine where the pod with the ElasticSearch container is started. The section in the sample file is as follows:template:  metadata:    labels:      deploymentconfig: api-gateway-deployment      tuned.openshift.io/elasticsearch: \"\"In OpenShift, use the ImageStream and ImageStreamTag objects to reference the image to be used for a container instead of specifying the image name directly in the spec.template.spec.containers section. The section in the sample file is as follows:triggers:  - type: ConfigChange  - type: ImageChange    imageChangeParams:      automatic: true      containerNames:      - api-gateway-deployment      from:        kind: ImageStreamTag        name: api-gateway-deployment:10.11---apiVersion: image.openshift.io/v1kind: ImageStreammetadata:  name: api-gateway-deploymentspec:  lookupPolicy:    local: false  tags:  - from:      kind: DockerImage      # Please fill in the path to your api gateway image stored in a docker registry.      name: <yourDockerRegistry>:<RegistryPort>/<PathToApiGateway>:10.11    importPolicy: {}    name: \"10.11\"    referencePolicy:      type: SourceUse the Route objects that OpenShift provides to make a service visible outside the cluster. Note that the URL specified in the spec.host parameter is unique across the whole OpenShift cluster. The section in the sample file is as follows:apiVersion: route.openshift.io/v1kind: Routemetadata:  name: api-gateway-uispec:  # Provide a URL that will be visible outside of the OpenShift cluster  host: api-gateway-ui.apps.<yourClusterBaseUrl>  port:    targetPort: 9072-tcp  subdomain: \"\"  to:    kind: Service    name: api-gateway-service    weight: 100  wildcardPolicy: None",
        "link": "https://documentation.softwareag.com/webmethods/api_gateway/yai10-15/webhelp/yai-webhelp/yai-webhelp/re-sample_files_openshift.html#"
    },
    "Retrieving JWT Token": {
        "text": "Retrieving JWT TokenYou can retrieve JWT using one of the following ways:Retrieve with static payload: This method is used to retrieve an access token for a general access.Retrieve using an Application Id: This method is used to retrieve an access token to be used for a particular application.To retrieve a JWT token1. Open your internet browser. 2. Perform one of the following steps to retrieve access token: To retrieve the access token with static payload, provide the following URL in the browser, with the IP of API Gateway in place of local host:http://localhost:5555/rest/pub/apigateway/jwt/getJsonWebTokenTo retrieve the access token for a particular application, provide the following URL, with the IP of API Gateway and required application Id:http://localhost:5555/rest/pub/apigateway/jwt/getJsonWebToken?app_id=applicationIdFor example,https://localhost:5556/rest/pub/apigateway/jwt/getJsonWebToken?app_id=9502c862-9e67-4726-bc13-598df42c7fb6The JWT token is displayed:The subject claim of the token generated by making a GET call will be the username of user who calls the JWT endpoint.Note:You must use HTTPS protocol when retrieving JWT token. If you want to use the HTTP protocol, you must set the pg_JWT_isHTTPS setting in the Administration > Extended Settings to false.",
        "link": "https://documentation.softwareag.com/webmethods/api_gateway/yai10-15/webhelp/yai-webhelp/yai-webhelp/ta-retrieve_json_bearer_token.html#"
    },
    "Configuring Reverse Invoke Setup": {
        "text": "Configuring Reverse Invoke SetupIn this scenario, you can configure the threat protection rules in API Gateway server (Standard Edition) located in the DMZ. In the API Gateway instance located in the green zone, you can configure the authentication, authorization, and mediation rules prior to routing the requests to the native API.Note:For a HA setup in API Gateway Standard Edition in DMZ, two nodes are adequate, and Software\u00a0AG recommends not to cluster the API Gateway Standard Edition. Hence, policies, threat protection rules and configurations must be created or deployed to individual nodes to keep the nodes synchronized.The following figure describes how reverse invoke works. The client requests are sent to the API Gateway instance in DMZ. These requests are present on the registration port. The green zone API Gateway listens to these requests through the listener port, processes the request through the native service application and responds back to the API Gateway instance in DMZ. The API Gateway instance in DMZ responds to the external clients.Important:A connection between API Gateway Server in DMZ and the API Gateway Server in Green zone is available except when a request is being made to the API Gateway in green zone or a response is being returned from the API Gateway in green zone. In other words, DMZ API Gateway connection utilization is I/O bound. Therefore, if you expect large, simultaneous transactions, increase the number of registered connections accordingly.To configure reverse invoke1. Configure external and registration ports on API Gateway in DMZ. a. Log on to API Gateway as an Administrator user. b.  Expand the menu options icon, in the title bar, and select Administration. c.  Navigate to Security > Ports. d.  Click Add ports. e. Select API Gateway external option from the Type drop-down menu. f. Click Add. g. Provide the following information in the API Gateway external listener configuration to configure the External port. External port. Specifies the port number you want to use for the external port.Use a number that is not already in use. This is the port that clients connect to through your outer firewall.Alias. Specifies an alias for the port.An alias must be between 1 and 255 characters in length and include one or more of the following: letters (a -z, A-Z), numbers (0-9), underscore (_), period (.), and hyphen (-).Description (optional). A description of the port.Protocol. Specifies the protocol to use for this port (HTTP or HTTPS).If you select HTTPS, additional security and credential boxes appear for which you have to provide the required values.Bind address (optional). Specifies the IP address to which to bind this port.Specify a bind address if your machine has multiple IP addresses and you want the port to use this specific address. If you do not specify a bind address, API Gateway picks one for you.Backlog. Specifies the number of requests that can remain in the queue for an enabled port before API Gateway begins rejecting requests.The default is 200. The maximum value is 65535.Keep alive timeout. Specifies when to close the connection if the server has not received a request from the client within this timeout value (in milliseconds) or when to close the connection if the client has explicitly placed a close request with the server.The default value is 20000ms.Note:For more information on ports, see      Ports.h. If you want to configure m-TLS, select HTTPS in the Protocol field under API Gateway external listener configuration and select one of the following options in the Client authentication field, in the in Security configuration section. Request client certificate. This option requests for a certificate from the client. However, even if the client does not provide a valid certificate, the connection is established.Require client certificate. This option requests for a certificate from the client. If the client does not provide a valid certificate, the connection is not established. If you select this option, you must also configure the following fields in the Listener specific credentials section.Keystore alias. Select a Keystore.Key alias(signing). Select a Key alias.Truststore alias. Select Truststore.i. Provide the required information to configure the registration port, in the API Gateway registration listener configuration section. The important fields to be configured are Registration port, Alias, and Protocol. For more information on ports, see      Ports.j. Configure the Keystore alias, Key alias, and Truststore alias fields. in the Listener specific credentials section. 2. Click Add. 3. Click the  icon in the Enabled column next to the external and registration ports to enable them. The port is enabled and a success message appears.4.  Execute the following steps in the green zone API Gateway. a. Create an API Gateway internal port. b. Select HTTPS in the Protocol field. c. In the API Gateway external server section, type the hostname of the DMZ API Gateway in the Host field. d. Type the port number of the API Gateway registration port of DMZ API Gateway in the Port field. e. In the Registration credentials section, provide the following information. Keystore alias. Select a Keystore.Key alias(signing). Select a Key alias.Truststore alias. Select Truststore.5. Configure the internal port of the API Gateway in green zone with the registration port of API Gateway in DMZ. 6. Configure load balancer URL in the green zoneAPI Gateway. a. Expand the menu options icon, in the title bar, and select Administration. b. Navigate to General > Load balancer. Provide the configured external server host and port or an external load balancer URL. The API endpoints expose this port for external consumers. If you have a Load Balancer, then the requests from the Load Balancer must be directed to API Gateway's external port.For more information on load balancers, see      Clusters and Load Balancers.7. Create an API in the internal API Gateway Server with routing protocol and endpoint as the native API. For more information on how to create APIs, see  Creating an API. 8. You can now access the API by using the URL in the format http://externalserver:externalport/gateway/api-name/resource-path.",
        "link": "https://documentation.softwareag.com/webmethods/api_gateway/yai10-15/webhelp/yai-webhelp/yai-webhelp/ta-apiserver_dmz_in_green_zone.html#"
    },
    "API-specific Dashboard": {
        "text": "API-specific DashboardYou can view the API-specific dashboard by navigating to the API details page and click Analytics.Select the API-specific dashboard from the drop-down list. The dashboard displays the following analytics based on the metrics monitored.To filter the API-specific analytics, select the time interval using the options:Quick select. Specify the time interval. Click Apply to filter the analytics based on the time interval.Commonly used. Select a commonly used time interval, and the filter is applied automatically. To view the API-specific analytics between a time interval, click Custom range > From Date > To Date > Apply.Recently used. Select a recently used time interval, and the filter is applied automatically.When you log in and view the analytics, the last used time interval is saved for each dashboard. When you view the dashboard again, the last used time interval for that dashboard is applied. The last used time interval is valid for the current session only.For the specified time interval, you can also filter based on an API. The API drop-down list displays all the APIs. On selecting an API, the data displayed is for the selected API.You can click on the specific event in the list under Legend to view the specific event in any of the widgets. You can view additional details for an event by hovering the cursor over a particular color in the graphical representations.MetricDescriptionEvents over time Displays the trending of events generated by the selected API over time.API invocationsDisplays the number of times the API was invoked during the specified time.API invocations - Status wiseDisplays the number of successful API invocations and failed API invocations during the specified time.API invocations is the sum of successful API invocations and failed API invocations.API invocation patternDisplays API invocation over period of time during the specified time interval in the form of a line graph.Native service performanceDisplays information on how fast the native service responds to the request received in the specified time based on the data in the transactional event.Gateway vs Provider timeDisplays the comparison between gatewayTime performance and providerTime performance.Response code trendDisplays the trend based on the response codes received from various events for the API during the specified time.API trend by response Displays the trending of the selected API based on the response time from the performance metrics for that API.Success vs Failure Displays the trending of API based on its success rate as compared to its failure rate in the performance metrics for the specified time.Runtime eventsDisplays the run time event details for the selected API. Displays information on the event type, date when the event was created, the agent on which the event was generated, description of the alert generated, the source of event, and the application that generated the event.Service result cacheDisplays a bar graph showing the number of responses served from cache and the number of responses fetched from the native service at the operation level for the selected API during the specified time.The Service result cache metric graphical representation is not supported for GraphQL API.Method level invocationsDisplays the method level invocations per operation for the API during the specified time.You can hover the cursor over the stacked bar chart to view the various methods invoked per operation or resource and also the operations or resources for the selected API during the specified time.The Service result cache metric graphical representation is not supported for GraphQL API.",
        "link": "https://documentation.softwareag.com/webmethods/api_gateway/yai10-15/webhelp/yai-webhelp/yai-webhelp/re-api_specific_dashboard.html#"
    },
    "Viewing Scope Mapping Details": {
        "text": "Viewing Scope Mapping DetailsYou must have the API Gateway's manage security configurations functional privilege assigned to manage scopes.You can view the scope details and modify the scope details as required from the OAuth/OpenID scopes page.To view scope mapping details1. Expand the menu options icon , in the title bar, and select OAuth/OpenID scopes. A list of available scopes appears. Use the Show drop-down list at the bottom of the page to set the maximum number of scopes you want to display in a page. The details, such as, name and description of the scope is displayed in the form of a table. You can delete a scope by clicking the delete icon .2. Click a scope. The scope details page appears. This page displays the details such as the authorization server name, the server scope, the API scopes that are linked to the server scope and the API scope details such as the API to which the scope is associated, the description of the API and API version number.You can modify the scope by clicking the Edit button and modifying the required values.Note:You can edit or delete the APIs from the scope mapping, only if the APIs are assigned to your team(s).",
        "link": "https://documentation.softwareag.com/webmethods/api_gateway/yai10-15/webhelp/yai-webhelp/yai-webhelp/ta-view_scope_details.html#"
    },
    "How Do I Create an API by Importing from a File?": {
        "text": "How Do I Create an API by Importing from a File?To create an API by importing a file1. In the Create API page, select Import API from file. 2. Click Browse and select the file to import. 3. Provide the API name in the Name field, if required. 4. Provide the required Description, API Type, Version, and click Create. The API is created and appears in the APIs list under the APIs tab.",
        "link": "https://documentation.softwareag.com/webmethods/api_gateway/yai10-15/webhelp/yai-webhelp/yai-webhelp/ta-qsg_create_api_from_a_file.html#"
    },
    "Configuring HTTPS Port": {
        "text": "Configuring HTTPS PortThis section provides information about configuring HTTPS ports available in API Gateway.To configure the HTTPS port1. In Command Central, navigate to Environments > Instances > All > API Gateway > Configuration. 2. Select Ports from the drop-down menu. 3. Click HTTPS Port Configuration. 4. Select Yes in the Enable field in the Basic configuration section. 5. Provide valid port numbers in the Port and Alias field of the HTTPS listener configuration section. 6. Select the required Keystore and Truststore from the available list of options. 7. Optionally, click Test to verify your configuration. 8. Save your changes. 9. Restart the API Gateway instance. The port is created and enabled.",
        "link": "https://documentation.softwareag.com/webmethods/api_gateway/yai10-15/webhelp/yai-webhelp/yai-webhelp/ta-config_apigw_ports_https.html#"
    },
    "How Do I Enable Transaction Logs?": {
        "text": "How Do I Enable Transaction Logs?You must enable the Transaction Logging policy, which is a global policy, to log the request and response payloads performed against an API. The policy is disabled, by default. Since it is a global policy, the policy is applied to all APIs across the application, when you enable the policy.Important:This step is mandatory to view the performance metrics of APIs in the Analytics tab.To enable transaction logs1. Click Policies in the title navigation bar of the home page and click Global Polices. 2. Enable the Transaction logging policy by clicking the  button adjacent to the policy name.",
        "link": "https://documentation.softwareag.com/webmethods/api_gateway/yai10-15/webhelp/yai-webhelp/yai-webhelp/ta-qsg_enable_transaction_logs.html#"
    },
    "Allowing Access to All IP Hosts": {
        "text": "Allowing Access to All IP HostsThe following procedure describes how to change the IP access settings for an individual port to Allow by Default and deny some hosts.1. Expand the menu options icon , in the title bar, and select Administration. 2. Select Security > Ports. The ports page lists all ports configured with API Gateway, if any.3. Click the IP Accessmode button for the port that you want to configure the IP access mode. The options to configure the port access mode are displayed.4. Select Allow by default. 5. In the Deny List field, provide the names of hosts for which you want to deny access to the port and click + Add. You can specify the host names (for example, workstation5.webmethods.com) or IP addresses (for example, 132.906.19.22 or 2001:db8:85a3:8d3:1319:8a2e:370:7348) in the above field. Repeat this step to add the required host names and IP addresses to the list. Also, you can also edit or delete the entered values by clicking the respective action next to the required value.The host names or IP addresses can include upper and lower case alphabetic characters, digits (0-9), hyphens (-), and periods (.) but cannot include spaces. For IPv6, IP addresses can also include colons (:) and brackets ([]).You can use the following pattern-matching characters to identify several clients with similar host names or IP addresses.CharDescriptionExample*Matches any number of charactersr*.webmethods.com?Matches any single characterworkstation?.webmethods.com6. Click Save. The changes are saved.",
        "link": "https://documentation.softwareag.com/webmethods/api_gateway/yai10-15/webhelp/yai-webhelp/yai-webhelp/ta-allow_connection_from_specified_ip_hosts_for_individual_port.html#"
    },
    "Overview of Security Configuration in API Gateway": {
        "text": "Overview of Security Configuration in API GatewayYou must have the API Gateway's manage security configurations functional privilege assigned to perform the following tasks in the security configuration section of API Gateway:Configure the keystores and truststores required for incoming and outgoing message-level and transport-level security.Configure ports of API Gateway.Configure the SAML issuer to use in API Gateway outbound authentication to fetch the SAML token from the STS (Security Token Service).Configure the custom assertions to use in inbound authentication of API Gateway.Configure Kerberos settings.Manage master password.Configure JSON web token(JWT), OAuth, and OpenID authorization servers and third-party providers.",
        "link": "https://documentation.softwareag.com/webmethods/api_gateway/yai10-15/webhelp/yai-webhelp/yai-webhelp/gtw_sec_config.html#"
    },
    "Running Clustered API Gateway and Elasticsearch Containers and a Kibana Container": {
        "text": "Running Clustered API Gateway and Elasticsearch Containers and a Kibana ContainerIn this deployment scenario you can use the sample Docker Compose file apigw-elasticsearch-cluster-kibana.yml.The figure depicts clustered API Gateway containers. They are talking to a clustered Terracotta Server Array container, a cluster of Elasticsearch container and an external Kibana.To run clustered API Gateway and Elasticsearch containers, and a Kibana container1. Set the environment variables to define the API Gateway, Terracotta, and the Kibana image as follows: export APIGW_DOCKER_IMAGE_NAME=image name or filepath location of an existing imageexport TERRACOTTA_DOCKER_IMAGE_NAME=terracotta image nameexport KIBANA_DOCKER_IMAGE_NAME=kibana image nameYou can create the required API Gateway Docker image through API Gateway scripting. For details on creating a Docker image, see      Building the Docker Image for an API Gateway Instance .Create the Terracotta image as follows:cd /opt/softwareagdocker build --file Terracotta/docker/images/server/Dockerfile \u2013tag is:tc Specify the API Gateway image by changing the .env file. API Gateway uses the .env file when the working directory is .../samples/docker-compose, else you must specify the environment variables. .API Gateway requires a customized Kibana image. The Docker file for creating the Kibana image is as follows:FROM centos:7COPY /opt/softwareag/profiles/IS_default/apigateway/dashboard /opt/softwareag/kibanaEXPOSE 9405RUN chmod 777 /opt/softwareag/kibana/bin/kibanaCMD /opt/softwareag/kibana/bin/kibana2. Run the following command to start the API Gateway Docker container and the Elasticsearch container using the Docker Compose sample file: cd SAG-Root/IntegrationServer/instances/default/packages/WmAPIGateway/resources/samples/docker-composedocker-compose -f apigw-elasticsearch-cluster-kibana.yml upIn the Docker Compose sample file apigw-elasticsearch-cluster-kibana.yml ensure that you have specified the required information such as image name, name and port of the Elasticsearch host, server port, UI port, and Kibana dashboard instance details. This creates and starts the containers. Run the docker ps command to view the details of the containers created.To run it in the detached mode, append -d in the docker-compose command.Note:You can stop the API Gateway Docker container and the Elasticsearch container using the docker-compose sample file with the following command:docker-compose -f apigw-elasticsearch-cluster-kibana.yml down",
        "link": "https://documentation.softwareag.com/webmethods/api_gateway/yai10-15/webhelp/yai-webhelp/yai-webhelp/ta-docker_container_apigw_es_cluster_kibana_docker_compose.html#"
    },
    "Adding New Nodes to an Elasticsearch Cluster": {
        "text": "Adding New Nodes to an Elasticsearch ClusterThis section explains how to add a new node to an Elasticsearch cluster. You can add nodes to a cluster by configuring new nodes to find an existing cluster and start them up.For example, consider that a new node, node 4, is added to a cluster that already has three nodes in it namely, node1, node2, and node3.To add new node to a cluster1. Open elasticsearch.yml located at SAG_root/InternalDataStore/config, where the new node is being added. The following configuration is a sample of how the configuration appears initially.cluster.name:\"SAG_EventDataStore\"node.name: node4path.logs: SAG_root\\InternalDataStore/logsnetwork.host:0.0.0.0http.port:9240discovery.seed_hosts: [\"node4:9340\"]transport.port:9340path.repo:['SAG_root\\InternalDataStore/archives']cluster.initial_master_nodes:[\"node4\"]xpack.ml.enabled: falsexpack.security.enabled: falsexpack.security.transport.ssl.enabled: falsexpack.security.http.ssl.enabled: falseaction.destructive_requires_name: false2. Provide the name of the node, as seen in the node.name property, and port number used by the node, as seen in the http.port property, in the discovery.seed_hosts property in the following format: host_name:port_nameFor examplenode4:9340Sample configuration after providing the new node details:cluster.name:\"SAG_EventDataStore\"cluster.initial_master_nodes:[\"node1\",\"node2\",\"node3\"]node.name: node4path.logs: SAG_root\\InternalDataStore/logsnetwork.host:0.0.0.0http.port:9240discovery.seed_hosts: [\"node1:9340\",\"node2:9340\",\"node3\":\"9340\",\"node4:9340\"]transport.port:9340path.repo:['SAG_root\\InternalDataStore/archives']xpack.ml.enabled: falsexpack.security.enabled: falsexpack.security.transport.ssl.enabled: falsexpack.security.http.ssl.enabled: falseaction.destructive_requires_name: false3. Save the configuration. The new node is added to the cluster. Note:When you restart an Elasticsearch cluster, you must restart the master node first.If you want to remove a node from a cluster do the following:1. Open the elasticsearch.yml file located at SAG_root/InternalDataStore/config/.2. Remove the node listed in the format host_name:port_name in the discovery.seed_hosts property.3. Save the elasticsearch.yml file and restart the Elasticsearch cluster. The specified node is now removed from the cluster.",
        "link": "https://documentation.softwareag.com/webmethods/api_gateway/yai10-15/webhelp/yai-webhelp/yai-webhelp/ta-add_node_to_cluster_2.html#"
    },
    "Keypoints about High Availability and Fault Tolerance (HAFT) solution": {
        "text": "Keypoints about High Availability and Fault Tolerance (HAFT) solutionThe architecture of HAFT is as follows:The keypoints about HAFT solution is as follows:Use this set up, if the RTO is highly demanding, which ranges from few seconds or minutes.Each data center or the cloud region hosts an independent or isolated cluster of its own.HAFT solution can be set up using Hot standby mode or Active-Active mode. The following table explains the difference between both the modes.Failover ModeRTORPODescriptionHot standby modefew seconds or minutes (time taken to switch the load balancer).less than 5 seconds.You can have only two data centers. Out of which only the primary data center serves the client request.Active-Active modeno down time.less than 5 seconds.You can have N (Min 2) number of data centers and all the data centers serve the client request.API assets should be synchronized across the data center through CI-CD deployments.Cross-DC federation support offered by API Gateway is limited to API consumers and auth tokens.API transactions are local to the cluster where the traffic is served and not aggregated. For aggregated transactions, use a centralized API Data Store.For more details, see      High Availability and Fault Tolerance.",
        "link": "https://documentation.softwareag.com/webmethods/api_gateway/yai10-15/webhelp/yai-webhelp/yai-webhelp/co-keypoints_haft.html#"
    }
}